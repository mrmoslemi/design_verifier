mtype = {
	posState_working,
	posState_idle,
	posState_failed,
	posState_paid,
	controllerState_select,
	controllerState_pos,
	controllerState_take,
	controllerState_produce,
	producerState_producing,
	producerState_full,
	producerState_empty,
	action_take,
	action_selectAmericano,
	action_selectLatte,
	action_selectMocha,
	action_selectEspresso,
	action_ok,
	action_cancel
};
chan producerState_cin = [0] of {mtype};

chan posState_cin = [0] of {mtype};

chan controllerState_cin = [0] of {mtype};

chan posState_cout = [0] of {mtype};

chan action_cin = [0] of {mtype};

mtype posState=posState_idle;
mtype controllerState=controllerState_select;
mtype producerState=producerState_empty;
mtype action=action_ok;


active proctype Pos(){
	do
	:: controllerState_cin?controllerState_select -> controllerState=controllerState_select;
	:: controllerState_cin?controllerState_pos -> controllerState=controllerState_pos;
		if
		// TRANSITION POS_SRS_1
		:: ((controllerState == controllerState_pos)) -> posState_cout!posState_working; 
		fi;
	:: controllerState_cin?controllerState_take -> controllerState=controllerState_take;
	:: controllerState_cin?controllerState_produce -> controllerState=controllerState_produce;
	:: posState_cin?posState_working -> posState=posState_working;
	:: posState_cin?posState_idle -> posState=posState_idle;
	:: posState_cin?posState_failed -> posState=posState_failed;
	:: posState_cin?posState_paid -> posState=posState_paid;
	// NO TRIG TRANSITION POS_SRS_2
	:: ((posState == posState_working)) -> posState_cout!posState_paid; 
	// NO TRIG TRANSITION POS_SRS_3
	:: ((posState == posState_working)) -> posState_cout!posState_failed; 
	od;
};

active proctype UniversalEnvironment(){
do
	::posState_cout?posState_paid -> posState_cin!posState_paid;
	::posState_cout?posState_failed -> posState_cin!posState_failed;
	::posState_cout?posState_working -> posState_cin!posState_working;
	::posState_cout?posState_idle -> posState_cin!posState_idle;
od;
}
trace{
	Q_0: if
		::posState_cin?posState_idle -> goto Q_0;
		::action_cin?action_selectLatte -> goto Q_0;
		::action_cin?action_selectAmericano -> goto Q_0;
		::posState_cin?posState_paid -> goto Q_0;
		::producerState_cin?producerState_full -> goto Q_0;
		::action_cin?action_selectMocha -> goto Q_0;
		::producerState_cin?producerState_producing -> goto Q_0;
		::producerState_cin?producerState_empty -> goto Q_0;
		::action_cin?action_ok -> goto Q_0;
		::posState_cin?posState_working -> goto Q_0;
		::action_cin?action_selectEspresso -> goto Q_0;
		::posState_cin?posState_failed -> goto Q_0;
		::action_cin?action_take -> goto Q_0;
		::action_cin?action_cancel -> goto Q_0;
	fi;

}
active proctype word(){
	producerState_cin!producerState_producing;

}
active proctype UnmatchedActions(){end: do
	:: producerState_cin?producerState_producing;
od;
}
